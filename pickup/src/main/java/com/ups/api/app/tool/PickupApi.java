package com.ups.api.app.tool;

import org.openapitools.pickup.client.ApiClient;
import org.openapitools.pickup.client.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestClientException;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PickupApi {
    private ApiClient apiClient;

    public PickupApi() {
        this(new ApiClient());
    }

    @Autowired
    public PickupApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Using the Pickup API, applications can schedule pickups, manage previously scheduled pickups, or cancel previously scheduled pickups.
     * Pickup Cancel
     * <p><b>200</b> - successful operation
     * <p><b>401</b> - Unauthorized Request
     * @param cancelBy Valid Values: 01 &#x3D; AccountNumber, 02 &#x3D; PRN (required)
     * @param version version of API e.g v1 (required)
     * @param transId An identifier unique to the request. Length 32 (optional)
     * @param transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to testing)
     * @param prn The pickup equest number (PRN) generated by  UPS pickup system. Required if CancelBy &#x3D; prn.Length 26 (optional)
     * @return PICKUPCancelResponseWrapper
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public PICKUPCancelResponseWrapper pickupCancel(String cancelBy, String version, String transId, String transactionSrc, String prn) throws RestClientException {
        return pickupCancelWithHttpInfo(cancelBy, version, transId, transactionSrc, prn).getBody();
    }

    /**
     * Using the Pickup API, applications can schedule pickups, manage previously scheduled pickups, or cancel previously scheduled pickups.
     * Pickup Cancel
     * <p><b>200</b> - successful operation
     * <p><b>401</b> - Unauthorized Request
     * @param cancelBy Valid Values: 01 &#x3D; AccountNumber, 02 &#x3D; PRN (required)
     * @param version version of API e.g v1 (required)
     * @param transId An identifier unique to the request. Length 32 (optional)
     * @param transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to testing)
     * @param prn The pickup equest number (PRN) generated by  UPS pickup system. Required if CancelBy &#x3D; prn.Length 26 (optional)
     * @return ResponseEntity&lt;PICKUPCancelResponseWrapper&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<PICKUPCancelResponseWrapper> pickupCancelWithHttpInfo(String cancelBy, String version, String transId, String transactionSrc, String prn) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'cancelBy' is set
        if (cancelBy == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'cancelBy' when calling pickupCancel");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'version' when calling pickupCancel");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("CancelBy", cancelBy);
        uriVariables.put("version", version);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        if (transId != null)
        localVarHeaderParams.add("transId", apiClient.parameterToString(transId));
        if (transactionSrc != null)
        localVarHeaderParams.add("transactionSrc", apiClient.parameterToString(transactionSrc));
        if (prn != null)
        localVarHeaderParams.add("Prn", apiClient.parameterToString(prn));

        final String[] localVarAccepts = { 
            "application/json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "oauth2" };

        ParameterizedTypeReference<PICKUPCancelResponseWrapper> localReturnType = new ParameterizedTypeReference<PICKUPCancelResponseWrapper>() {};
        return apiClient.invokeAPI("/shipments/{version}/pickup/{CancelBy}", HttpMethod.DELETE, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Using the Pickup API, applications can schedule pickups, manage previously scheduled pickups, or cancel previously scheduled pickups.
     * Pickup Creation
     * <p><b>200</b> - successful operation
     * <p><b>401</b> - Unauthorized Request
     * @param version Version of the API. Valid values:  v1 v1607 v1707. Length 5 (required)
     * @param piCKUPCreationRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param transId An identifier unique to the request. Length 32 (optional)
     * @param transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to testing)
     * @return PICKUPCreationResponseWrapper
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public PICKUPCreationResponseWrapper pickupCreation(String version, PICKUPCreationRequestWrapper piCKUPCreationRequestWrapper, String transId, String transactionSrc) throws RestClientException {
        return pickupCreationWithHttpInfo(version, piCKUPCreationRequestWrapper, transId, transactionSrc).getBody();
    }

    /**
     * Using the Pickup API, applications can schedule pickups, manage previously scheduled pickups, or cancel previously scheduled pickups.
     * Pickup Creation
     * <p><b>200</b> - successful operation
     * <p><b>401</b> - Unauthorized Request
     * @param version Version of the API. Valid values:  v1 v1607 v1707. Length 5 (required)
     * @param piCKUPCreationRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param transId An identifier unique to the request. Length 32 (optional)
     * @param transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to testing)
     * @return ResponseEntity&lt;PICKUPCreationResponseWrapper&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<PICKUPCreationResponseWrapper> pickupCreationWithHttpInfo(String version, PICKUPCreationRequestWrapper piCKUPCreationRequestWrapper, String transId, String transactionSrc) throws RestClientException {
        Object localVarPostBody = piCKUPCreationRequestWrapper;
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'version' when calling pickupCreation");
        }
        
        // verify the required parameter 'piCKUPCreationRequestWrapper' is set
        if (piCKUPCreationRequestWrapper == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'piCKUPCreationRequestWrapper' when calling pickupCreation");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("version", version);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        if (transId != null)
        localVarHeaderParams.add("transId", apiClient.parameterToString(transId));
        if (transactionSrc != null)
        localVarHeaderParams.add("transactionSrc", apiClient.parameterToString(transactionSrc));

        final String[] localVarAccepts = { 
            "application/json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "oauth2" };

        ParameterizedTypeReference<PICKUPCreationResponseWrapper> localReturnType = new ParameterizedTypeReference<PICKUPCreationResponseWrapper>() {};
        return apiClient.invokeAPI("/pickupcreation/{version}/pickup", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Using the Pickup API, applications can schedule pickups, manage previously scheduled pickups, or cancel previously scheduled pickups.
     * Pickup Get Political Division1 List
     * <p><b>200</b> - successful operation
     * <p><b>401</b> - Unauthorized Request
     * @param transId An identifier unique to the request. Length 32 (required)
     * @param transactionSrc An identifier of the client/source application that is making the request.Length 512 (required)
     * @param version Version of API e.g. v1 (required)
     * @param countrycode Country or terrirtory for which the list will  represent.Length 2 (required)
     * @return PICKUPPolDivResponseWrapper
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public PICKUPPolDivResponseWrapper pickupGetPoliticalDivision1List(String transId, String transactionSrc, String version, String countrycode) throws RestClientException {
        return pickupGetPoliticalDivision1ListWithHttpInfo(transId, transactionSrc, version, countrycode).getBody();
    }

    /**
     * Using the Pickup API, applications can schedule pickups, manage previously scheduled pickups, or cancel previously scheduled pickups.
     * Pickup Get Political Division1 List
     * <p><b>200</b> - successful operation
     * <p><b>401</b> - Unauthorized Request
     * @param transId An identifier unique to the request. Length 32 (required)
     * @param transactionSrc An identifier of the client/source application that is making the request.Length 512 (required)
     * @param version Version of API e.g. v1 (required)
     * @param countrycode Country or terrirtory for which the list will  represent.Length 2 (required)
     * @return ResponseEntity&lt;PICKUPPolDivResponseWrapper&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<PICKUPPolDivResponseWrapper> pickupGetPoliticalDivision1ListWithHttpInfo(String transId, String transactionSrc, String version, String countrycode) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'transId' is set
        if (transId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'transId' when calling pickupGetPoliticalDivision1List");
        }
        
        // verify the required parameter 'transactionSrc' is set
        if (transactionSrc == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'transactionSrc' when calling pickupGetPoliticalDivision1List");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'version' when calling pickupGetPoliticalDivision1List");
        }
        
        // verify the required parameter 'countrycode' is set
        if (countrycode == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'countrycode' when calling pickupGetPoliticalDivision1List");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("version", version);
        uriVariables.put("countrycode", countrycode);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        if (transId != null)
        localVarHeaderParams.add("transId", apiClient.parameterToString(transId));
        if (transactionSrc != null)
        localVarHeaderParams.add("transactionSrc", apiClient.parameterToString(transactionSrc));

        final String[] localVarAccepts = { 
            "application/json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "oauth2" };

        ParameterizedTypeReference<PICKUPPolDivResponseWrapper> localReturnType = new ParameterizedTypeReference<PICKUPPolDivResponseWrapper>() {};
        return apiClient.invokeAPI("/pickup/{version}/countries/{countrycode}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Using the Pickup API, applications can schedule pickups, manage previously scheduled pickups, or cancel previously scheduled pickups.
     * Pickup Get Service Center Facilities
     * <p><b>200</b> - successful operation
     * <p><b>401</b> - Unauthorized Request
     * @param version Version of API e.g v1 (required)
     * @param piCKUPServCenterRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param transId An identifier unique to the request. Length 32 (optional)
     * @param transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to testing)
     * @return PICKUPServCenterResponseWrapper
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public PICKUPServCenterResponseWrapper pickupGetServiceCenterFacilities(String version, PICKUPServCenterRequestWrapper piCKUPServCenterRequestWrapper, String transId, String transactionSrc) throws RestClientException {
        return pickupGetServiceCenterFacilitiesWithHttpInfo(version, piCKUPServCenterRequestWrapper, transId, transactionSrc).getBody();
    }

    /**
     * Using the Pickup API, applications can schedule pickups, manage previously scheduled pickups, or cancel previously scheduled pickups.
     * Pickup Get Service Center Facilities
     * <p><b>200</b> - successful operation
     * <p><b>401</b> - Unauthorized Request
     * @param version Version of API e.g v1 (required)
     * @param piCKUPServCenterRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param transId An identifier unique to the request. Length 32 (optional)
     * @param transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to testing)
     * @return ResponseEntity&lt;PICKUPServCenterResponseWrapper&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<PICKUPServCenterResponseWrapper> pickupGetServiceCenterFacilitiesWithHttpInfo(String version, PICKUPServCenterRequestWrapper piCKUPServCenterRequestWrapper, String transId, String transactionSrc) throws RestClientException {
        Object localVarPostBody = piCKUPServCenterRequestWrapper;
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'version' when calling pickupGetServiceCenterFacilities");
        }
        
        // verify the required parameter 'piCKUPServCenterRequestWrapper' is set
        if (piCKUPServCenterRequestWrapper == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'piCKUPServCenterRequestWrapper' when calling pickupGetServiceCenterFacilities");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("version", version);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        if (transId != null)
        localVarHeaderParams.add("transId", apiClient.parameterToString(transId));
        if (transactionSrc != null)
        localVarHeaderParams.add("transactionSrc", apiClient.parameterToString(transactionSrc));

        final String[] localVarAccepts = { 
            "application/json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "oauth2" };

        ParameterizedTypeReference<PICKUPServCenterResponseWrapper> localReturnType = new ParameterizedTypeReference<PICKUPServCenterResponseWrapper>() {};
        return apiClient.invokeAPI("/pickup/{version}/servicecenterlocations", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Using the Pickup API, applications can schedule pickups, manage previously scheduled pickups, or cancel previously scheduled pickups.
     * Pickup Pending Status
     * <p><b>200</b> - successful operation
     * <p><b>401</b> - Unauthorized Request
     * @param accountNumber The specific account number that belongs to the  shipper.Length 6 or 10 (required)
     * @param version version of API e.g v1 (required)
     * @param pickuptype Type of pickup. Valid values: oncall smart both. Length 6 (required)
     * @param transId An identifier unique to the request. Length 32 (optional)
     * @param transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to testing)
     * @return PICKUPPendingResponseWrapper
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public String pickupPendingStatus(String accountNumber, String version, String pickuptype, String transId, String transactionSrc) throws RestClientException {
        return pickupPendingStatusWithHttpInfo(accountNumber, version, pickuptype, transId, transactionSrc).getBody();
    }

    /**
     * Using the Pickup API, applications can schedule pickups, manage previously scheduled pickups, or cancel previously scheduled pickups.
     * Pickup Pending Status
     * <p><b>200</b> - successful operation
     * <p><b>401</b> - Unauthorized Request
     * @param accountNumber The specific account number that belongs to the  shipper.Length 6 or 10 (required)
     * @param version version of API e.g v1 (required)
     * @param pickuptype Type of pickup. Valid values: oncall smart both. Length 6 (required)
     * @param transId An identifier unique to the request. Length 32 (optional)
     * @param transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to testing)
     * @return ResponseEntity&lt;PICKUPPendingResponseWrapper&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<String> pickupPendingStatusWithHttpInfo(String accountNumber, String version, String pickuptype, String transId, String transactionSrc) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'accountNumber' is set
        if (accountNumber == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'accountNumber' when calling pickupPendingStatus");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'version' when calling pickupPendingStatus");
        }
        
        // verify the required parameter 'pickuptype' is set
        if (pickuptype == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'pickuptype' when calling pickupPendingStatus");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("version", version);
        uriVariables.put("pickuptype", pickuptype);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        if (transId != null)
        localVarHeaderParams.add("transId", apiClient.parameterToString(transId));
        if (transactionSrc != null)
        localVarHeaderParams.add("transactionSrc", apiClient.parameterToString(transactionSrc));
        if (accountNumber != null)
        localVarHeaderParams.add("AccountNumber", apiClient.parameterToString(accountNumber));

        final String[] localVarAccepts = { 
            "application/json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "oauth2" };

        ParameterizedTypeReference<String> localReturnType = new ParameterizedTypeReference<String>() {};
        return apiClient.invokeAPI("/shipments/{version}/pickup/{pickuptype}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Using the Pickup API, applications can schedule pickups, manage previously scheduled pickups, or cancel previously scheduled pickups.
     * Pickup Rate
     * <p><b>200</b> - successful operation
     * <p><b>401</b> - Unauthorized Request
     * @param version Version of the API. Valid values v1 (required)
     * @param pickuptype Type of pickup. Valid values: oncall smart both. Length 6 (required)
     * @param piCKUPRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param transId An identifier unique to the request. Length 32 (optional)
     * @param transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to testing)
     * @return PICKUPResponseWrapper
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public PICKUPResponseWrapper pickupRate(String version, String pickuptype, PICKUPRequestWrapper piCKUPRequestWrapper, String transId, String transactionSrc) throws RestClientException {
        return pickupRateWithHttpInfo(version, pickuptype, piCKUPRequestWrapper, transId, transactionSrc).getBody();
    }

    /**
     * Using the Pickup API, applications can schedule pickups, manage previously scheduled pickups, or cancel previously scheduled pickups.
     * Pickup Rate
     * <p><b>200</b> - successful operation
     * <p><b>401</b> - Unauthorized Request
     * @param version Version of the API. Valid values v1 (required)
     * @param pickuptype Type of pickup. Valid values: oncall smart both. Length 6 (required)
     * @param piCKUPRequestWrapper Generate sample code for popular API requests by selecting an example below. To view a full sample request and response, first click \&quot;Authorize\&quot; and enter your application credentials, then populate the required parameters above and click \&quot;Try it out\&quot;. (required)
     * @param transId An identifier unique to the request. Length 32 (optional)
     * @param transactionSrc An identifier of the client/source application that is making the request.Length 512 (optional, default to testing)
     * @return ResponseEntity&lt;PICKUPResponseWrapper&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<PICKUPResponseWrapper> pickupRateWithHttpInfo(String version, String pickuptype, PICKUPRequestWrapper piCKUPRequestWrapper, String transId, String transactionSrc) throws RestClientException {
        Object localVarPostBody = piCKUPRequestWrapper;
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'version' when calling pickupRate");
        }
        
        // verify the required parameter 'pickuptype' is set
        if (pickuptype == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'pickuptype' when calling pickupRate");
        }
        
        // verify the required parameter 'piCKUPRequestWrapper' is set
        if (piCKUPRequestWrapper == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'piCKUPRequestWrapper' when calling pickupRate");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("version", version);
        uriVariables.put("pickuptype", pickuptype);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        if (transId != null)
        localVarHeaderParams.add("transId", apiClient.parameterToString(transId));
        if (transactionSrc != null)
        localVarHeaderParams.add("transactionSrc", apiClient.parameterToString(transactionSrc));

        final String[] localVarAccepts = { 
            "application/json"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
         };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "oauth2" };

        ParameterizedTypeReference<PICKUPResponseWrapper> localReturnType = new ParameterizedTypeReference<PICKUPResponseWrapper>() {};
        return apiClient.invokeAPI("/shipments/{version}/pickup/{pickuptype}", HttpMethod.POST, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
}
